"""Add active column to user table

Revision ID: 7715708f827c
Revises: complete_schema_update
Create Date: 2025-01-27 12:38:42.746587

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7715708f827c'
down_revision = 'complete_schema_update'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('staff_price_task', schema=None) as batch_op:
        batch_op.drop_index('ix_staff_price_task_status')

    op.drop_table('staff_price_task')
    with op.batch_alter_table('invoice', schema=None) as batch_op:
        batch_op.add_column(sa.Column('cloudinary_url', sa.String(length=512), nullable=True))
        batch_op.add_column(sa.Column('total_amount', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('total_items', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('category_summary', sa.JSON(), nullable=True))
        batch_op.alter_column('wholesaler_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('file_path',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               existing_nullable=True)
        batch_op.drop_constraint('invoice_invoice_number_key', type_='unique')
        batch_op.drop_index('ix_invoice_processed_date')
        batch_op.drop_index('ix_invoice_status')
        batch_op.drop_constraint('fk_invoice_supplier', type_='foreignkey')
        batch_op.drop_column('file_type')
        batch_op.drop_column('supplier_id')
        batch_op.drop_column('processing_notes')

    with op.batch_alter_table('invoice_item', schema=None) as batch_op:
        batch_op.add_column(sa.Column('raw_quantity', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('raw_unit_price', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('raw_total', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('unit_price', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('total', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('confidence_score', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('matching_notes', sa.Text(), nullable=True))
        batch_op.alter_column('quantity',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.drop_column('cloudinary_url')
        batch_op.drop_column('staff_processed')
        batch_op.drop_column('price_difference_percentage')
        batch_op.drop_column('matching_confidence')
        batch_op.drop_column('requires_approval')
        batch_op.drop_column('cloudinary_public_id')
        batch_op.drop_column('previous_cost_price')
        batch_op.drop_column('total_amount')
        batch_op.drop_column('needs_review')
        batch_op.drop_column('price_difference')
        batch_op.drop_column('is_matched')
        batch_op.drop_column('cost_price')
        batch_op.drop_column('price_status')
        batch_op.drop_column('approval_notes')

    with op.batch_alter_table('margin_suggestion', schema=None) as batch_op:
        batch_op.add_column(sa.Column('category', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('reasoning', sa.Text(), nullable=True))
        batch_op.alter_column('suggested_margin',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.drop_column('area_type')
        batch_op.drop_column('category_name')
        batch_op.drop_column('insights')
        batch_op.drop_column('location')

    with op.batch_alter_table('price_update', schema=None) as batch_op:
        batch_op.add_column(sa.Column('update_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('reason', sa.Text(), nullable=True))
        batch_op.alter_column('old_price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('new_price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.alter_column('assigned_to_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('created_by_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('temp_product', schema=None) as batch_op:
        batch_op.add_column(sa.Column('suggested_margin', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               existing_nullable=False)
        batch_op.drop_index('ix_temp_product_status')
        batch_op.drop_column('status')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('active', sa.Boolean(), nullable=True))
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=64),
               nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=False)
        batch_op.drop_index('ix_user_email')
        batch_op.drop_index('ix_user_username')
        batch_op.create_unique_constraint(None, ['username'])
        batch_op.create_unique_constraint(None, ['email'])
        batch_op.drop_column('last_login')

    with op.batch_alter_table('wholesaler', schema=None) as batch_op:
        batch_op.add_column(sa.Column('address', sa.Text(), nullable=True))
        batch_op.drop_column('is_daily')
        batch_op.drop_column('invoice_parsing_notes')
        batch_op.drop_column('invoice_format')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('wholesaler', schema=None) as batch_op:
        batch_op.add_column(sa.Column('invoice_format', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('invoice_parsing_notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_daily', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.drop_column('address')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.create_index('ix_user_username', ['username'], unique=True)
        batch_op.create_index('ix_user_email', ['email'], unique=True)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
        batch_op.drop_column('active')

    with op.batch_alter_table('temp_product', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.create_index('ix_temp_product_status', ['status'], unique=False)
        batch_op.alter_column('name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               existing_nullable=False)
        batch_op.drop_column('created_at')
        batch_op.drop_column('suggested_margin')

    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.alter_column('created_by_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('assigned_to_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('price_update', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.alter_column('new_price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.alter_column('old_price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.drop_column('reason')
        batch_op.drop_column('update_date')

    with op.batch_alter_table('margin_suggestion', schema=None) as batch_op:
        batch_op.add_column(sa.Column('location', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('insights', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('category_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('area_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.alter_column('suggested_margin',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.drop_column('reasoning')
        batch_op.drop_column('category')

    with op.batch_alter_table('invoice_item', schema=None) as batch_op:
        batch_op.add_column(sa.Column('approval_notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('price_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('cost_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('is_matched', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('price_difference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('needs_review', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('total_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('previous_cost_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('cloudinary_public_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('requires_approval', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('matching_confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('price_difference_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('staff_processed', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('cloudinary_url', sa.VARCHAR(length=512), autoincrement=False, nullable=True))
        batch_op.alter_column('quantity',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True)
        batch_op.drop_column('matching_notes')
        batch_op.drop_column('confidence_score')
        batch_op.drop_column('total')
        batch_op.drop_column('unit_price')
        batch_op.drop_column('raw_total')
        batch_op.drop_column('raw_unit_price')
        batch_op.drop_column('raw_quantity')

    with op.batch_alter_table('invoice', schema=None) as batch_op:
        batch_op.add_column(sa.Column('processing_notes', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('supplier_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('file_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('fk_invoice_supplier', 'wholesaler', ['supplier_id'], ['id'])
        batch_op.create_index('ix_invoice_status', ['status'], unique=False)
        batch_op.create_index('ix_invoice_processed_date', ['processed_date'], unique=False)
        batch_op.create_unique_constraint('invoice_invoice_number_key', ['invoice_number'])
        batch_op.alter_column('status',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
        batch_op.alter_column('file_path',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
        batch_op.alter_column('wholesaler_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('category_summary')
        batch_op.drop_column('total_items')
        batch_op.drop_column('total_amount')
        batch_op.drop_column('cloudinary_url')

    op.create_table('staff_price_task',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('temp_product_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('staff_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('label_printed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completion_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['staff_id'], ['user.id'], name='staff_price_task_staff_id_fkey'),
    sa.ForeignKeyConstraint(['temp_product_id'], ['temp_product.id'], name='staff_price_task_temp_product_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='staff_price_task_pkey')
    )
    with op.batch_alter_table('staff_price_task', schema=None) as batch_op:
        batch_op.create_index('ix_staff_price_task_status', ['status'], unique=False)

    # ### end Alembic commands ###
