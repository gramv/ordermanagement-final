"""initial migration

Revision ID: 311758c1dbcc
Revises: 
Create Date: 2025-01-09 20:19:58.176260

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '311758c1dbcc'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('default_margin', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('customer_order',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('customer_name', sa.String(length=100), nullable=False),
    sa.Column('customer_contact', sa.String(length=100), nullable=False),
    sa.Column('order_date', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('is_paid', sa.Boolean(), nullable=True),
    sa.Column('total_amount', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('password_hash', sa.String(length=256), nullable=True),
    sa.Column('role', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_username'), ['username'], unique=True)

    op.create_table('wholesaler',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('is_daily', sa.Boolean(), nullable=True),
    sa.Column('contact_person', sa.String(length=100), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('invoice_format', sa.String(length=50), nullable=True),
    sa.Column('invoice_parsing_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('daily_sales',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('report_time', sa.DateTime(), nullable=False),
    sa.Column('employee_id', sa.Integer(), nullable=False),
    sa.Column('front_register_amount', sa.Float(), nullable=False),
    sa.Column('back_register_amount', sa.Float(), nullable=False),
    sa.Column('credit_card_amount', sa.Float(), nullable=False),
    sa.Column('otc1_amount', sa.Float(), nullable=False),
    sa.Column('otc2_amount', sa.Float(), nullable=False),
    sa.Column('front_register_cash', sa.Float(), nullable=False),
    sa.Column('back_register_cash', sa.Float(), nullable=False),
    sa.Column('credit_card_total', sa.Float(), nullable=False),
    sa.Column('otc1_total', sa.Float(), nullable=False),
    sa.Column('otc2_total', sa.Float(), nullable=False),
    sa.Column('total_expected', sa.Float(), nullable=False),
    sa.Column('total_actual', sa.Float(), nullable=False),
    sa.Column('front_register_discrepancy', sa.Float(), nullable=False),
    sa.Column('back_register_discrepancy', sa.Float(), nullable=False),
    sa.Column('overall_discrepancy', sa.Float(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('daily_sales', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_daily_sales_date'), ['date'], unique=False)

    op.create_table('invoice',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('invoice_number', sa.String(length=100), nullable=True),
    sa.Column('wholesaler_id', sa.Integer(), nullable=False),
    sa.Column('processed_by_id', sa.Integer(), nullable=True),
    sa.Column('file_path', sa.String(length=500), nullable=True),
    sa.Column('cloudinary_public_id', sa.String(length=255), nullable=True),
    sa.Column('file_type', sa.String(length=50), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('processing_notes', sa.Text(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('invoice_date', sa.Date(), nullable=False),
    sa.Column('upload_date', sa.DateTime(), nullable=True),
    sa.Column('processed_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['processed_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['wholesaler_id'], ['wholesaler.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('invoice_number')
    )
    op.create_table('order_list',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('wholesaler_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('type', sa.String(length=10), nullable=False),
    sa.Column('finalized_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['wholesaler_id'], ['wholesaler.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('size', sa.String(length=50), nullable=True),
    sa.Column('unit', sa.String(length=20), nullable=True),
    sa.Column('cost_price', sa.Float(), nullable=False),
    sa.Column('selling_price', sa.Float(), nullable=False),
    sa.Column('margin', sa.Float(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('wholesaler_id', sa.Integer(), nullable=False),
    sa.Column('available_in_store', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('invoice_identifier', sa.String(length=100), nullable=True),
    sa.Column('alternative_names', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], ),
    sa.ForeignKeyConstraint(['wholesaler_id'], ['wholesaler.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('product_id')
    )
    op.create_table('customer_order_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('customer_order_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('custom_product_name', sa.String(length=100), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.ForeignKeyConstraint(['customer_order_id'], ['customer_order.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('invoice_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('invoice_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('raw_product_name', sa.String(length=200), nullable=True),
    sa.Column('raw_product_code', sa.String(length=100), nullable=True),
    sa.Column('raw_size', sa.String(length=50), nullable=True),
    sa.Column('raw_unit', sa.String(length=20), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('cost_price', sa.Float(), nullable=True),
    sa.Column('total_amount', sa.Float(), nullable=True),
    sa.Column('is_matched', sa.Boolean(), nullable=True),
    sa.Column('matching_confidence', sa.Float(), nullable=True),
    sa.Column('needs_review', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoice.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order_list_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_list_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['order_list_id'], ['order_list.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('price_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('cost_price', sa.Float(), nullable=False),
    sa.Column('selling_price', sa.Float(), nullable=False),
    sa.Column('margin', sa.Float(), nullable=False),
    sa.Column('change_type', sa.String(length=50), nullable=True),
    sa.Column('change_reason', sa.Text(), nullable=True),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.Column('effective_date', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoice.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('price_update',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('invoice_id', sa.Integer(), nullable=True),
    sa.Column('updated_by_id', sa.Integer(), nullable=False),
    sa.Column('old_cost_price', sa.Float(), nullable=True),
    sa.Column('new_cost_price', sa.Float(), nullable=True),
    sa.Column('old_selling_price', sa.Float(), nullable=True),
    sa.Column('new_selling_price', sa.Float(), nullable=True),
    sa.Column('old_margin', sa.Float(), nullable=True),
    sa.Column('new_margin', sa.Float(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('price_tag_updated', sa.Boolean(), nullable=True),
    sa.Column('update_notes', sa.Text(), nullable=True),
    sa.Column('is_ai_suggested', sa.Boolean(), nullable=True),
    sa.Column('ai_confidence', sa.Float(), nullable=True),
    sa.Column('ai_reasoning', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoice.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sales_documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sales_id', sa.Integer(), nullable=False),
    sa.Column('document_type', sa.String(length=50), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('cloudinary_public_id', sa.String(length=255), nullable=False),
    sa.Column('secure_url', sa.String(length=512), nullable=False),
    sa.Column('upload_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['sales_id'], ['daily_sales.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sales_documents')
    op.drop_table('price_update')
    op.drop_table('price_history')
    op.drop_table('order_list_item')
    op.drop_table('invoice_item')
    op.drop_table('customer_order_item')
    op.drop_table('product')
    op.drop_table('order_list')
    op.drop_table('invoice')
    with op.batch_alter_table('daily_sales', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_daily_sales_date'))

    op.drop_table('daily_sales')
    op.drop_table('wholesaler')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_username'))
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    op.drop_table('customer_order')
    op.drop_table('category')
    # ### end Alembic commands ###
